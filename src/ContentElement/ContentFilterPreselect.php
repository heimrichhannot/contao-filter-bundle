<?php
/**
 * Copyright (c) 2018 Heimrich & Hannot GmbH
 *
 * @author  Rico Kaltofen <r.kaltofen@heimrich-hannot.de>
 * @license http://www.gnu.org/licences/lgpl-3.0.html LGPL
 */

namespace HeimrichHannot\FilterBundle\ContentElement;


use Contao\ContentElement;
use Contao\Controller;
use Contao\StringUtil;
use Contao\System;
use HeimrichHannot\FilterBundle\Filter\AbstractType;
use HeimrichHannot\FilterBundle\Model\FilterPreselectModel;
use Patchwork\Utf8;

class ContentFilterPreselect extends ContentElement
{
    /**
     * Template
     *
     * @var string
     */
    protected $strTemplate = 'ce_filter_initial';

    public function generate()
    {
        if (System::getContainer()->get('huh.utils.container')->isBackend()) {
            $objTemplate           = new \BackendTemplate('be_wildcard');
            $objTemplate->wildcard = implode("\n", $this->getWildcard());
            $objTemplate->title    = '### '.Utf8::strtoupper(($GLOBALS['TL_LANG']['CTE'][$this->type][0])).' ###';

            return $objTemplate->parse();
        }

        $this->preselect();

        return parent::generate(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the wildcard from preselection
     *
     * @return array
     */
    protected function getWildcard(): array
    {
        $wildcard = [];

        if (null === ($filterConfig = System::getContainer()->get('huh.filter.manager')->findById($this->filter)) || null === ($elements = $filterConfig->getElements())) {
            return $wildcard;
        }

        /** @var FilterPreselectModel $preselections */
        $preselections = System::getContainer()->get('contao.framework')->createInstance(FilterPreselectModel::class);


        if (null === ($preselections = $preselections->findPublishedByPidAndTableAndField($this->id, 'tl_content', 'filterPreselect'))) {
            return $wildcard;
        }

        /** @var FilterPreselectModel $preselection */
        foreach ($preselections as $preselection) {
            $wildcard[] = System::getContainer()->get('huh.filter.backend.filter_preselect')->adjustLabel($preselection->row(), $preselection->id);
        }

        return $wildcard;
    }

    /**
     * Invoke preselection
     */
    protected function preselect()
    {
        /** @var FilterPreselectModel $preselections */
        $preselections = System::getContainer()->get('contao.framework')->createInstance(FilterPreselectModel::class);


        if (null === ($preselections = $preselections->findPublishedByPidAndTableAndField($this->id, 'tl_content', 'filterPreselect'))) {
            return;
        }

        $data = System::getContainer()->get('huh.filter.util.filter_preselect')->getPreselectData($this->filter, $preselections->getModels());

        if (null === ($filterConfig = System::getContainer()->get('huh.filter.manager')->findById($this->filter)) || null === ($elements = $filterConfig->getElements())) {
            return;
        }

        $filterConfig->setData($data);

        if (true !== (bool)$this->filterPreselectNoRedirect) {
            Controller::redirect($filterConfig->getUrl());
        }
    }

    /**
     * @inheritDoc
     */
    protected function compile()
    {
    }
}